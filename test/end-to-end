#!/usr/bin/env ruby
require "securerandom"
require_relative "kafka_helpers"

$rafka = (ENV["RAFKA"] || "localhost:6380").split(":")
$host = $rafka[0]
$port = Integer($rafka[1])

require "bundler/inline"
gemfile(true) do
  source 'https://rubygems.org'
  gem "rufka", git: "https://github.com/skroutz/rufka"
  gem "minitest"
end

require "minitest/autorun"

class TestRafka < Minitest::Test
  TOPIC = ENV["DOCKER"] ? "test-rafka-#{Time.now.to_i}-#{SecureRandom.hex(6)}" : "test-rafka"
  FLUSH_TIMEOUT = 5000
  CONSUME_RETRIES = 3

  def setup
    @cons = Rufka::Consumer.new(host: $host, port: $port,
      topic: TOPIC, group: "test-#{SecureRandom.hex(6)}", id: SecureRandom.hex(4))
    @prod = Rufka::Producer.new(host: $host, port: $port)
  end

  def test_consume_single
    start_consumer!(@cons)

    produce_and_flush!(@prod, TOPIC, "huhu")

    msg = consume_with_retry(@cons)
    assert_equal "huhu", (msg && msg.value)
  end

  def test_consume_many
    start_consumer!(@cons)

    3.times { |i| @prod.produce(TOPIC, i) }
    flush!(@prod)

    replies = []
    3.times do |i|
      msg = consume_with_retry(@cons)
      if !(msg && msg.value =~ /\A\d\z/)
        flunk("Unexpected reply: #{msg.inspect}. Replies so far: #{replies.inspect}")
      end
      replies << msg.value
    end

    assert_equal ["0", "1", "2"], replies.sort
    assert_nil @cons.consume(1)
  end

  def test_producer_flush
    5.times { @prod.produce(TOPIC, "foo") }
    assert_equal 0, @prod.flush(FLUSH_TIMEOUT)
  end

  # TODO: why this fails sometimes?
  def test_multiple_consumers_same_topic
    group_id = SecureRandom.hex(6)
    cons1 = Rufka::Consumer.new(host: $host, port: $port, topic: TOPIC, group: group_id, id: "cons1")
    cons2 = Rufka::Consumer.new(host: $host, port: $port, topic: TOPIC, group: group_id, id: "cons2")
    start_consumer!(cons1)
    start_consumer!(cons2)

    msgs = Array.new(2) { SecureRandom.hex(4) }

    # produce it
    msgs.each { |msg| @prod.produce(TOPIC, msg) }
    flush!(@prod)

    # consume it
    replies = []
    2.times do
      msg = consume_with_retry(cons1)
      break if !msg
      replies << msg.value
    end

    if replies.size < 2
      2.times do
        msg = consume_with_retry(cons2)
        replies << msg.value if msg
        break if replies.size == 2
      end
    end

    assert_equal msgs.sort, replies.sort
  end

  # TODO: why this fails sometimes?
  def test_consumer_reassign
    group_id = SecureRandom.hex(6)
    cons1 = Rufka::Consumer.new(host: $host, port: $port, topic: TOPIC, group: group_id, id: "cons1")
    cons2 = Rufka::Consumer.new(host: $host, port: $port, topic: TOPIC, group: group_id, id: "cons2")

    start_consumer!(cons1)
    msg = SecureRandom.hex(4)
    produce_and_flush!(@prod, TOPIC, msg)
    assert_rafka_msg_equal msg, consume_with_retry(cons1)

    cons1.quit # so that cons2 gets all the partitions

    start_consumer!(cons2)
    msg = SecureRandom.hex(4)
    produce_and_flush!(@prod, TOPIC, msg)
    assert_rafka_msg_equal msg, consume_with_retry(cons2)
  end

  private

  # @return [nil, Rufka::Message]
  def consume_with_retry(consumer)
    res = nil
    CONSUME_RETRIES.times do
      res = consumer.consume(2)
      return res if res
    end
    res
  end

  def produce_and_flush!(prod, topic, msg)
    prod.produce(topic, msg)
    flush!(prod)
  end

  def flush!(prod)
    unflushed = prod.flush(FLUSH_TIMEOUT)
    flunk("#{unflushed} unflushed messages remained") if unflushed > 0
  end

  def start_consumer!(cons)
    cons.consume(1)
  end

  def assert_rafka_msg(msg)
    assert_kind_of Rufka::Message, msg
  end

  def assert_rafka_msg_equal(exp, act, msg=nil)
    assert_rafka_msg(act)
    assert_equal exp, act.value
  end
end

puts "\nRunning tests on #$host:#$port (CONSUME_RETRIES=#{TestRafka::CONSUME_RETRIES})..."

if ENV["DOCKER"]
  create_topic!(TestRafka::TOPIC, partitions: 4, replication_factor: 2)
  MiniTest.after_run { delete_topic!(TestRafka::TOPIC) }
end
